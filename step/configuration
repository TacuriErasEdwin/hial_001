PARAMETROS DE CONFIGURACION PARA UNA APP WEB
1. crear un proyecto "app003"
c/usuarios/edu/DjangoProyects/app003

cd C:\Users\edu\DjangoProyects\app003  	//para ingresar a la carpeta

		//nos queda la direccion C:\Users\edu\DjangoProyects\app003>cd app003

3 C:\Users\edu\DjangoProyects\app003>

dir  				// (comando dir)
---------------------
4. Python --version
C:\Users\edu\DjangoProyects\app003>

Python --version  		//version del python

5. instalamos maquina virtual (para cada aplicacion p003)

pip install virtualenv  	// instalamos la maquina virtual en el proyecto
python -m venv venv		// comando para crear la maquina virtual y el nombre es VENV
				//Activar el entorno VIRTUAL: 
venv\Scripts\activate		//vamos a activar el entorno virtual
dir				//para ver las carpeta creada "venv"

-------------
---------------------

6. Instalamos django: pip install django en el proyecto

pip install django		        //empezamos a cargar las librerias, dentro de la carpeta "app002"
pip install djangorestframework  	//
pip install mysqlclient pymysql  	//instalamos el cliente de mysql
pip install django-cors-headers  	//los permisos

7. vamos a crear un proyecto
django-admin startproject citas .	//creamos el proyecto "citam", para que me cree en la raiz
dir					//revisamos las carpetas creadas

8.levanto mi servidor
python manage.py runserver		// reviso en el navegador  http://127.0.0.1:8000/

9. levantamos nuestro proyecto de citas
python manage.py startapp citasmedicas	//el app es "citasmedicas"

10. editamos nuestra configuración a nivel código
code .				//con code abrimos nuestro editor
				// de visual estudio con las carpetas creadas

11.  trabajamos en visual estudio
		citas/settings.py  //realizamos los siguientes cambios:

INSTALLED_APPS=[ …, 
colocamos: 

'corsheaders',
'citasmedicas', 
'rest_framework',

12. Editamos en Moddleware 
MIDDLEWARE = //agregamos la lines:

'corsheaders.middleware.CorsMiddleware',

11.  trabajamos en visual estudio

	//en citas/ settings.py

INSTALLED_APPS=[ …, 
colocamos: 

'corsheaders',
'citasmedicas', 
'rest_framework',

12. Editamos en Moddleware 
//en citas/ settings.py

MIDDLEWARE = //agregamos la lines:

'corsheaders.middleware.CorsMiddleware',

13 Agregamos configuración del cors, 
que son para los permisos, sin espacios, al final pegamos

//en citas/ settings.py     //al final del programa

#cors authotization
CORS_ALLOWED_ORIGINS = []

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    }



14 generamos las migraciones, para que todo lo configurado e instaldo este correcto en CMD: 

python manage.py migrate  		//revisar que este bien

15. Levantamos el proyecto   (sin errores)
python manage.py runserver		//se eliminan errores

------------------------------
16. Creamos la base de datos en mysql citasdb, para que se conecte con django
		//	activamos xaamp-control (el programa)
		//	verificamos el puerto donde escucha(80)

		//abrimosen xampp conf para la base de datos
		//----	#Listen 12.34.56.78:80
		//----Listen 80

		//-----ServerName localhost:80

		// activamos apache y mysql
		luego colocamos en el navegador:

http://localhost:80/phpmyadmin

17. creamos la base de datos

creamos la base de datos phpMyAdmin: (en el navegador)

name: app03db
utf8mb3_general_ci--->utf16_general_ci

18.phpmyadmin
en settings.py cargamos lo siguiente:

ALLOWED_HOSTS = []
MEDIA_ROOT = '/media/'

19.// luego copiamos en el DATABASES:

DATABASES = {
        'default': {
                'ENGINE': 'django.db.backends.mysql', #ENGINE es 
motor de BD
                'NAME': 'dbname', 	// app03db
                'USER': 'root',		//root
                'PASSWORD': '',		//puede queda vacio si no hay clave''
                'HOST': '127.0.0.1',	//
                'PORT': '3306',		//
        }
}



20. Editamos el models de la app

// citasmedica--models.py  , empezamos a editar las db
// podemos copiar el codigo del git hub

//tipo de relaciones: djando models. Many ToManyField
//tipo de Campos : djando=models.type Field


21//vamos a migrar luego de haber generado la db

python manage.py makemigrations		 // para crear los modelos de las db
python manage.py migrate		//hacemos un comig de la db se crean tablas, 
					//se debe revisar mysql en la web

22//Editamos el admin para su administración:
//admin.py

from django.contrib import admin
from .models import Doctores, Sintomas, Cita

admin.site.register(Doctores)
admin.site.register(Sintomas)
admin.site.register(Cita)


